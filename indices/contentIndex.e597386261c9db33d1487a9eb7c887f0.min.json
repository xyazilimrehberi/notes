{"/":{"title":"xYazilimRehberi","content":"\nYazılım Rehberi home.\n\n[[courses/git/Mini Kurs git|Mini Kurs: git]]","lastmodified":"2023-04-05T13:58:45.343731158Z","tags":[]},"/Vim-metin-d%C3%BCzenleyicisi":{"title":"Vim metin düzenleyicisi","content":"","lastmodified":"2023-04-05T13:58:45.343731158Z","tags":[]},"/cmd-yi-acmak":{"title":"cmd yi acmak","content":"\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/bgSSJQolR0E\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n","lastmodified":"2023-04-05T13:58:45.343731158Z","tags":[]},"/courses/git/Mini-Kurs-git":{"title":"Mini Kurs git","content":"\n![[gitlogo.png]]\n\nGit, yazılım geliştirmede standart bir araç haline gelen güçlü bir versiyon kontrol sistemidir. Geliştiricilerin zaman içinde kodlarında yapılan değişiklikleri takip etmelerine, projedeki diğer geliştiricilerle işbirliği yapmalarına ve kod tabanlarının birden fazla sürümünü yönetmelerine olanak sağlar. \n\nGit'i öğrenmek yalnızca yazılım projelerinde başkalarıyla çalışmayı kolaylaştırmakla kalmaz, aynı zamanda bireylerin kendi projelerini daha etkili bir şekilde yönetmelerine de yardımcı olur. \n\nGit becerileri teknoloji endüstrisinde yüksek talep görmektedir, bu nedenle Git öğrenmek kişinin kariyer beklentilerini de artırabilir. Genel olarak Git, yazılım geliştirme ile ilgilenen herkes için önemli bir araçtır ve Git'i öğrenmek kişinin profesyonel gelişimine bir yatırımdır.\n\n[[courses/git/Mini Kurs git|Mini Kurs: git]]\n* Giriş\n\t- [[courses/git/git nedir?|git nedir?]]\n\t* [[gitin onemi|git'in önemi?]]\n\t * [[courses/git/Temel git teminolojisi|Temel git teminolojisi]]\n\n","lastmodified":"2023-04-05T13:58:45.343731158Z","tags":[]},"/courses/git/Son-bolum":{"title":"Son bolum","content":"\nBu son bölümü tamalayarak, Git ve sürüm kontrolünün temelleri hakkında yeterli bir bilgi edindiniz. Git, değişiklikleri izlemenize, başkalarıyla işbirliği yapmanıza ve kod tabanınızı verimli bir şekilde yönetmenize olanak tanıyan güçlü bir araçtır. Git ile önceki sürümlere kolayca geri dönebilir, değişiklikleri karşılaştırabilir ve kod tabanınızı birden fazla dal(branch) üzerinden yönetebilirsiniz. Versiyon kontrolü, modern yazılım geliştirme iş akışlarının temelini oluşturur ve bu nedenle yazılım geliştiricileri için oldukça önemli bir beceridir.\n\nGit'in temellerini öğrenerek daha yetkin bir geliştirici olma yolunda önemli bir adım atmış bulunuyorsunuz. Git üzerinde daha çok pratik yaparak, geliştirme süreçlerinizi kolaylaştırır, diğer geliştiricilerle işbirliği yapıp ortak projeler geliştirebilir ve kod tabanınızı verimli bir şekilde yönetebilirsiniz. Kodlama becerilerinizi geliştirmek için Git ile denemeler yapmaya ve onu iş akışınıza dahil etmeye devam edin.\n\nTebrikler! Artık Git ve sürüm kontrolü konusunda sağlam bir temele sahipsiniz. Git'i keşfetmeye ve denemeye devam ettiğinizde yetkin bir Git kullanıcısı olma yolunda ilerleyeceksiniz. Çalışmalarınıza devam edin ve unutmayın, pratik yaparak gelişirsiniz.\n\n","lastmodified":"2023-04-05T13:58:45.343731158Z","tags":[]},"/courses/git/Temel-git-teminolojisi":{"title":"Temel git teminolojisi","content":"\nBu bölümde size bazı temel git terminolojisini sunacak olsam da, herhangi bir pratik deneyiminiz olmadan bu terimleri tam olarak anlamak zor olabilir. Bu nedenle, her şeyi ayrıntılı olarak anlamaya çalışmadan genel bir fikir edinmek için bu bölümü okumanızı öneriyorum.\n\n\u003e **Repository:** Repository (repo), git tarafından takip edilen dosya ve dizinlerden oluşan bir koleksiyondur.\n\n\u003e **Commit:** Commit, reponun belirli bir zamandaki anlık görüntüsüdür. Her commit, repodaki dosyalarda yapılan bir dizi değişikliği temsil eder.\n\n\u003e **Branch:** Branch(dal), depodaki ayrı bir geliştirme hattıdır(line). Her branch'ın kendi değişiklikleri ve commit'leri olabilir, bu da birden fazla geliştiricinin farklı özellikler(feature) veya düzeltmeler(fix) üzerinde bağımsız olarak çalışmasına olanak tanır.\n\n\u003e **Merge:** Merge(birleştirme), iki veya daha fazla geliştirme branch'ini tek bir branch'te birleştirme işlemidir. Bu genellikle bir özellik veya düzeltme tamamlandığında ve ana branch'e entegre edilmeye hazır olduğunda yapılır.\n\n\u003e **Pull:** Pull(çekme), değişiklikleri uzaktaki(remote) bir repo'dan alma ve yerel repo'nuza çekme işlemidir.\n\n\u003e **Push:** Push(itme), yerel(local) değişikliklerinizi başkalarıyla paylaşmak için uzak(remote) bir repo'ya gönderme işlemidir.\n\n\u003e **Clone:** Clone(klonlama), üzerinde yerel(local) olarak çalışabilmeniz için uzak(remote) bir repo'nun makinenizde yerel bir kopyasını oluşturma işlemidir.\n\n\u003e **Remote:** Remote, [GitHub](http://github.com/) veya [GitLab](https://gitlab.com/) üzerinde barındırılan bir repo gibi uzak bir repo'ya referanstır.\n\n\u003e **Fork:** Fork, farklı bir hesap(account) veya kuruluşta(organization) uzak bir reponun kopyasını hendi uzak(remote) hesabınızda oluşturma işlemidir. Bu, kopyalanan repo'da orijinal repo'dan bağımsız olarak değişiklik yapmanıza ve istenirse orijinal repo'ya pull request (çekme istekleri) yapmanıza olanak tanır.\n\nSıradaki: [[git kurulumu|git kurulumu]]\n","lastmodified":"2023-04-05T13:58:45.343731158Z","tags":[]},"/courses/git/dagitilmis":{"title":"dağıtılmış","content":"dağıtılmış (distributed), bir Git [[repo]]sunu klonlayan her kullanıcının, tüm değişiklik geçmişi de dahil olmak üzere tüm [[repo]]nun eksiksiz bir kopyasına sahip olduğu gerçeğini ifade eder. Bu, [[repo]]nun \"resmi\" sürümünü tutan merkezi bir sunucu olmadığı ve tüm kullanıcıların aynı dosya kümesine ve sürüm geçmişine eşit erişime sahip olduğu anlamına gelir.\n\nHer kullanıcının [[repo]]nun yerel kopyası bağımsız olarak değiştirilebilir ve değişiklikler Git'in dağıtılmış sürüm kontrol sistemi kullanılarak [[repo]]nun farklı kopyaları arasında paylaşılabilir. Kullanıcılar değişikliklerini diğer kullanıcıların [[repo]]larına gönderebilir ve başkaları tarafından yapılan değişiklikleri kendi yerel kopyalarına geri çekebilir.","lastmodified":"2023-04-05T13:58:45.343731158Z","tags":[]},"/courses/git/git-kurulumu":{"title":"git kurulumu","content":"\n\nGit'i kullanmaya başlamak için önce bilgisayarınıza yükleyelim. Kurulum adımları işletim sisteminize bağlı olarak farklılık gösterecektir. Aşağıda, windows dahil olmak üzere, farklı işletim sistemleri için gerekli adımlarda size rehberlik edeceğim. Kodlama öğrenme yolculuğunuzun bu noktasında işletim sisteminizi değiştirmenize gerek olmadığını belirtmekte fayda var. Ancak, .Net Framework ile devam etmeye karar vermediğiniz sürece, öğrenme yolculuğunuzda daha da ilerlemeye karar verdiğinizde macOS veya Ubuntu gibi Unix benzeri işletim sistemlerini kullanmanızı tavsiye ediyorum.\n\nGit ile çalışmaya başlamadan önce, Git'in bilgisayarınızda halihazırda yüklü olup olmadığını kontrol edelim. macOS veya Ubuntu gibi herhangi bir Unix benzeri işletim sistemi kullanıyorsanız, [[terminali acmak|terminali açarak]] (Windows kullanıyorsanız, [[cmd yi acmak|CMD'yi açarak]]) aşağıdaki komutu yazın,\n\n```bash\ngit --version\n```\n\nEğer Git bilgisayarınızda yüklüyse, verisyon numarasının görüntülendiğini göreceksiniz, örneğin:\n\n```bash\n\u003e git version 2.30.1 (Apple Git-130)\n```\n\nAncak, aşağıdaki gibi bir çıktı görürseniz\n\n```bash\n\u003e command not found: git\n```\n\ngit'i yüklemeniz gerekiyor.\n\n==macOS kullanıcıları== için, Git'i macOS için bir paket yöneticisi olan Homebrew kullanarak yükleyebilirsiniz. Homebrew'u yüklemek için Terminal'i açın ve aşağıdaki komutu çalıştırın:\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nHomebrew kurulduktan sonra, aşağıdaki komutu çalıştırarak Git'i kurabilirsiniz:\n\n```bash\nbrew install git\n```\n\n==Ubuntu kullanıcıları== için Git'i apt paket yöneticisini kullanarak yükleyebilirsiniz. Terminali açın ve aşağıdaki komutu çalıştırın:\n\n```bash\nsudo apt-get update\nsudo apt-get install git\n```\n\n==Windows kullanıcıları== için Git yükleyicisini [resmi web sitesinden](https://git-scm.com/download/win) indirebilirsiniz. Yükleyici indirildikten sonra, yükleme işlemini başlatmak için çift tıklayın. Kurulumu tamamlamak için yönergeleri izleyin.\n\nGit'i kurduktan sonra, terminalinizde veya cmd'de `git --version` komutunu tekrar çalıştırarak doğru şekilde yüklenip yüklenmediğini kontrol edebilirsiniz. Versiyon numarasını görüyorsanız, Git'i kullanmaya başlamaya hazırsınız demektir!\n\nSıradaki: [[courses/git/git pratigi|git pratiği]]\n","lastmodified":"2023-04-05T13:58:45.343731158Z","tags":[]},"/courses/git/git-nedir":{"title":"git nedir?","content":"\n![Linus Torvalds](courses/git/linus.jpeg)\n\nGit, yazılım kodundaki değişiklikleri yönetmek için kullanılan ücretsiz ve açık kaynaklı bir versiyon kontrol sistemidir. Linus Torvalds tarafından 2005 yılında Linux kernel'inin geliştirilmesini yönetmek için oluşturuldu ve o zamandan beri yazılım geliştirmede en yaygın kullanılan versiyon kontrol sistemlerinden biri haline geldi.\n\nGit, zaman içinde dosyalarda yapılan değişiklikleri kaydederek geliştiricilerin  bir proje üzerinde işbirliği yapmalarına olanak tanır. Git ayrıca değişikliklerin bir geçmişini tutar ve gerektiğinde kodun önceki bir sürümüne geri dönmeyi kolaylaştırır. Git bilgisayarda yerel olarak çalışır, ancak web'deki repo'ları yönetmek için de kullanılabilir ve geliştiricilerin aynı proje üzerinde birlikte çalışmasına olanak tanır.\n\nGenel olarak Git, modern yazılım geliştirme için önemli bir araçtır ve her ölçekten geliştirici ve kuruluş tarafından yaygın olarak kullanılmaktadır.\n\n\u003e **Eğlenceli bilgi:** Linus Torvalds, projelerine kendi adını ve \"get\" kelimesini verme eğiliminde olduğu için git'e kendi adını vermiştir. Torvalds'a göre git ismi kısa, hatırlaması kolay ve diğer yazılım araçlarından farklı olduğu için seçilmiştir. 2007 yılındaki bir e-posta listesi gönderisinde kendisini, tıpkı Linux'ta yaptığı gibi projelerine kendi adını vermeyi seven \"egoist bir piç\" olarak tanımladı. Biraz mizahi kökenine rağmen Git, yazılım geliştirme için hayati bir araç haline geldi ve artık hem geliştiriciler hem de kuruluşlar arasında kullanımı yaygınlaştı.\n\nSıradaki: [[gitin onemi|git'in önemi]]\n","lastmodified":"2023-04-05T13:58:45.343731158Z","tags":[]},"/courses/git/git-pratigi":{"title":"git pratigi","content":"\nBu bölümde Git'in en temel özelliklerini ele alacağım. İlk olarak, bir klasör oluşturarak içinde Git'i başlatacağım. Ardından, \"Merhaba Dünya\" metnini içeren, `hello.txt` isminde  bir metin dosyası oluşturup bu dosyayı Git'e commit edecek ve bu commit'i git log'unda (kayıt günlüğünde) görüntüleyeceğim. Son olarak, Git'in versiyon takibi yapabilme özelliğini göstermek için bu commit'i geri alıp repo'yu önceki versiyona alacağım. Bu bölüm, bize Git'in temel işlevleri hakkında pratik bir giriş sağlayacak.\n\n## Adım 1: Klasör oluşturma\n\nTerminalinizi veya windows'ta çalışıyorsanız cmd'yi açın, git test klasörünüzü oluşturmak istediğiniz dizine gidin ve ardından yeni bir klasör oluşturmak için aşağıdaki komutu çalıştırın:\n\n```bash\nmkdir git-test\n```\n\n## Adım 2: Klasörün içine gidin\n\nYeni oluşturduğunuz klasöre gitmek için aşağıdaki komutu çalıştırın:\n\n```bash\ncd git-test\n```\n\nŞimdi bu klasördeki dosya ve dizinleri görüntülemek için `ls -lah` komutunu çalıştırın ve klasörün henüz boş olduğunu görün.\n\n## Adım 3: Git repo'yu başlatın\n\nKlasörde yeni bir Git deposu başlatmak için aşağıdaki komutu çalıştırın:\n\n```bash\ngit init\n```\n\nŞimdi `ls -lah` komutunu tekrar çalıştırın ve git init komutu ile oluşturulan `.git` klasörünü görün. Tüm commit geçmişiniz ve değişiklikleriniz bu gizli `.git` klasöründe tutulacak.\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/6OOFo0Nh_SA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\n## Adım 4: \"Merhaba Dünya\" metnini içeren bir metin dosyası oluşturun\n\nİçinde \"Merhaba Dünya\" metni bulunan `hello.txt` adında yeni bir metin dosyası oluşturmak için aşağıdaki komutu çalıştırın:\n\n```bash\necho \"Hello World\" \u003e hello.txt\n```\n\n* Bu dosyayı oluşturmak ve aşağıdaki videoda yaptığım gibi \"Merhaba Dünya\" metnini eklemek için [[Vim metin düzenleyicisi]]ni de kullanabilirsiniz.\n\nBu komut ile hello.txt dosyasındaki metni kontrol edebilirsiniz:\n\n```bash\ncat hello.txt\n```\n\nYa da sadece dosyayı açın ve metni okuyun.\n\n## Adım 5: Metin dosyasını ekleyin ve commit yapın\n\nŞimdi henüz git'e eklenmemiş değişiklikleriniz olduğunu görmek için bu komutu çalıştırın:\n\n```bash\ngit status\n```\n\n`hello.txt` dosya adının çıktıda kırmızı renkle listelendiğini görüyorsunuz. Kırmızı renk, değişikliklerinizi henüz git'e eklemediğinizi gösterir.\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/CHC_87kWLGM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\nŞimdi `hello.txt` dosyasını Git repo'nuza eklemek için aşağıdaki komutları çalıştırın:\n\n```bash\ngit add hello.txt\n```\n\nŞimdi git status komutunu tekrar çalıştıdığınızda dosya adının yeşil renkte olduğunu göreceksiniz. Şimdi değişikliklerinizi commit etmek ve repo'nuzun yeni sürümüne eklemek için aşağıdaki komutu çalıştırın:\n\n```bash\ngit commit -m \"Added hello.txt with Hello World text\"\n```\n\nYukaridaki komuttaki `-m` argümanı, geçmişte yaptığınız değişiklikleri hatırlamanıza yarayan bir commit mesajı eklemenize olanak tanır. Bu commit mesajı, gelecekte log'larınızı gözden geçirirken değişikliklerinizi hatırlamanız açısınsan oldukça önemlidir. Her zaman, yaptığınız değişiklikleri doğru bir şekilde yansıtan anlamlı ve açıklayıcı bir commit mesajı kullanmaya özen gösterin. Bu, sizin ve aynı repo üzerinde birlikte çalıştığınız diğer kişilerin commit geçmişine baktıklarında (örneğin `git log`), commit'in amacını ve içeriğini kolayca anlamasına yardımcı olacaktır.\n\n## Adım 6: Commit'i günlükte görüntüleyin\n\nAz önce yaptığınız işlemi Git günlüğünde göstermek için aşağıdaki komutu çalıştırın:\n\n```bash\ngit log\n```\n\nGünlükte commit mesajını ve commit'in diğer ayrıntılarını göreceksiniz.\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-9U9FYyDcIc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\n## Adım 7: Bir önceki versiyona geri dönün\n\nŞimdi, hello.txt dosyasının olmadığı ilk duruma geri dönelim. Son işlemi geri almak için aşağıdaki komutu çalıştırın:\n\n```bash\ngit revert HEAD\n```\n\nBu, önceki commit'te yapılan değişiklikleri geri alan yeni bir commit oluşturacak ve git repo'nuz bir önceki durumuna geri dönecektir.\n\n## Adım 8: Günlükte bu işlemi görüntüleyin\n\nGit günlüğünde revert(geri alma) commit'ini görüntülemek için aşağıdaki komutu çalıştırın:\n\n```bash\ngit log\n```\n\nGit günlüğünde, diğer ilgili bilgilerle birlikte revert commit'inin ayrıntılarını görüyor olacaksınız. Bu bölümde Git ile oluşturduğunuz repo'da, Git'in işlemlerinizi takip etme ve versiyon takibini yapmanızda ne kadar güçlü bir araç olduğunu gördünüz. Kod tabanınızda yapılan değişiklikleri commit günlüğü aracılığıyla görüntülemek ve takibini yapabilmek, kod geliştirirken versiyon kontrolünde önemli bir adımdır. Git, projenizin geçmişini etkili bir şekilde yönetmenize ve izlemenize olanak tanır.\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/TzUtIy0cg2Q\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\nSıradaki: [[courses/git/Son bolum|Son bölüm]]\n","lastmodified":"2023-04-05T13:58:45.343731158Z","tags":[]},"/courses/git/gitin-onemi":{"title":"gitin onemi","content":"\n\n![geliştiriciler](courses/git/devs.jpg)\n\ngit, yazılım geliştirme ve işbirliği için temel bir araçtır ve önemi, sürüm kontrolünü yönetme yeteneğinde yatmaktadır. Versiyon kontrolü, bir kod tabanında zaman içinde yapılan değişiklikleri izleme ve yönetme uygulamasıdır ve git, geliştiricilerin etkili bir şekilde işbirliği yapmasını ve karmaşık yazılım projelerini yönetmesini sağlayan [[dagitilmis|dağıtılmış]] bir versiyon kontrol sistemidir.\n\nGit ile birden fazla geliştirici aynı kod tabanı üzerinde eş zamanlı olarak çalışabilir, her biri bağımsız olarak değişikliklere katkıda bulunabilir ve çakışmaları gerçek zamanlı olarak çözebilir. Ayrıca Git, geliştiricilerin değişiklikleri takip etmesini, önceki sürümlere geri dönmesini ve dalları yönetmesini sağlayarak ana kod tabanını etkilemeden yeni özellikler ve hata düzeltmeleri denemelerine olanak tanır.\n\nKısaca Git, tüm yazılım geliştirme ekipleri için kritik bir araçtır ve verimli çalışmalarını, etkili bir şekilde işbirliği yapmalarını ve karmaşık projeleri kolaylıkla yönetmelerini sağlar.\n\nSıradaki: [[courses/git/Temel git teminolojisi|Temel git teminolojisi]]\n\n","lastmodified":"2023-04-05T13:58:45.343731158Z","tags":[]},"/courses/git/repo":{"title":"depo","content":"repo (repository), git sürüm kontrol sistemi tarafından takip edilen bir dosya ve dizin koleksiyonudur. Yeni bir git reposu oluşturduğunuzda git, repodaki tüm dosyalarda yapılan değişiklikleri izlemeye başlar ve zaman içinde kodunuzda veya diğer dosyalarda yapılan değişiklikleri kolayca yönetmenize ve izlemenize olanak tanır.","lastmodified":"2023-04-05T13:58:45.343731158Z","tags":[]},"/templates/courses/Mini-Kurs-git":{"title":"Mini Kurs git","content":"[[courses/git/Mini Kurs git|Mini Kurs: git]]\n* Giriş\n\t- [[courses/git/git nedir?|git nedir?]]\n\t* [[courses/git/gitin onemi|git'in önemi]]\n\t * [[courses/git/Temel git teminolojisi|Temel git teminolojisi]]\n * Yükleme ve pratik\n\t * [[git kurulumu|git kurulumu]]\n\t * [[courses/git/git pratigi|git pratiği]]\n\t * [[courses/git/Son bolum|Son bölüm]]\n","lastmodified":"2023-04-05T13:58:45.347731454Z","tags":[]},"/terminali-acmak":{"title":"terminali acmak","content":"\n==macOS==\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/QROX039ckO8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\n==Ubuntu==\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KKTgw2jFnUg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n","lastmodified":"2023-04-05T13:58:45.347731454Z","tags":[]}}