{"/":{"title":"xYazilimRehberi","content":"\nYazılım Rehberi home.\n\n[[courses/git/Mini Kurs git|Mini Kurs: git]]","lastmodified":"2023-04-03T19:43:40.759907892Z","tags":[]},"/courses/git/Mini-Kurs-git":{"title":"Mini Kurs git","content":"\n![[gitlogo.png]]\n\nGit, yazılım geliştirmede standart bir araç haline gelen güçlü bir versiyon kontrol sistemidir. Geliştiricilerin zaman içinde kodlarında yapılan değişiklikleri takip etmelerine, projedeki diğer geliştiricilerle işbirliği yapmalarına ve kod tabanlarının birden fazla sürümünü yönetmelerine olanak sağlar. \n\nGit'i öğrenmek yalnızca yazılım projelerinde başkalarıyla çalışmayı kolaylaştırmakla kalmaz, aynı zamanda bireylerin kendi projelerini daha etkili bir şekilde yönetmelerine de yardımcı olur. \n\nGit becerileri teknoloji endüstrisinde yüksek talep görmektedir, bu nedenle Git öğrenmek kişinin kariyer beklentilerini de artırabilir. Genel olarak Git, yazılım geliştirme ile ilgilenen herkes için önemli bir araçtır ve Git'i öğrenmek kişinin profesyonel gelişimine bir yatırımdır.\n\n[[courses/git/Mini Kurs git|Mini Kurs: git]]\n* Giriş\n\t- [[courses/git/git nedir?|git nedir?]]\n\t* [[courses/git/gitin onemi?|git'in önemi?]]\n\t * [[courses/git/Temel git teminolojisi|Temel git teminolojisi]]\n\n","lastmodified":"2023-04-03T19:43:40.759907892Z","tags":[]},"/courses/git/da%C4%9F%C4%B1t%C4%B1lm%C4%B1%C5%9F":{"title":"dağıtılmış","content":"dağıtılmış (distributed), bir Git [[depo]]sunu klonlayan her kullanıcının, tüm değişiklik geçmişi de dahil olmak üzere tüm [[depo]]nun eksiksiz bir kopyasına sahip olduğu gerçeğini ifade eder. Bu, deponun \"resmi\" sürümünü tutan merkezi bir sunucu olmadığı ve tüm kullanıcıların aynı dosya kümesine ve sürüm geçmişine eşit erişime sahip olduğu anlamına gelir.\n\nHer kullanıcının [[depo]]nun yerel kopyası bağımsız olarak değiştirilebilir ve değişiklikler Git'in dağıtılmış sürüm kontrol sistemi kullanılarak deponun farklı kopyaları arasında paylaşılabilir. Kullanıcılar değişikliklerini diğer kullanıcıların [[depo]]larına gönderebilir ve başkaları tarafından yapılan değişiklikleri kendi yerel kopyalarına geri çekebilir.","lastmodified":"2023-04-03T19:43:40.759907892Z","tags":[]},"/courses/git/depo":{"title":"depo","content":"depo (repository), git sürüm kontrol sistemi tarafından takip edilen bir dosya ve dizin koleksiyonudur. Yeni bir git deposu oluşturduğunuzda git, depodaki tüm dosyalarda yapılan değişiklikleri izlemeye başlar ve zaman içinde kodunuzda veya diğer dosyalarda yapılan değişiklikleri kolayca yönetmenize ve izlemenize olanak tanır.","lastmodified":"2023-04-03T19:43:40.759907892Z","tags":[]},"/courses/git/git-nedir":{"title":"git nedir?","content":"\n![Linus Torvalds](courses/git/linus.jpeg)\n\nGit, yazılım kodundaki değişiklikleri yönetmek için kullanılan ücretsiz ve açık kaynaklı bir versiyon kontrol sistemidir. Linus Torvalds tarafından 2005 yılında Linux kernel'inin geliştirilmesini yönetmek için oluşturuldu ve o zamandan beri yazılım geliştirmede en yaygın kullanılan versiyon kontrol sistemlerinden biri haline geldi.\n\nGit, zaman içinde dosyalarda yapılan değişiklikleri kaydederek geliştiricilerin  bir proje üzerinde işbirliği yapmalarına olanak tanır. Git ayrıca değişikliklerin bir geçmişini tutar ve gerektiğinde kodun önceki bir sürümüne geri dönmeyi kolaylaştırır. Git bilgisayarda yerel olarak çalışır, ancak web'deki repo'ları yönetmek için de kullanılabilir ve geliştiricilerin aynı proje üzerinde birlikte çalışmasına olanak tanır.\n\nGenel olarak Git, modern yazılım geliştirme için önemli bir araçtır ve her ölçekten geliştirici ve kuruluş tarafından yaygın olarak kullanılmaktadır.\n\n\u003e **Eğlenceli bilgi:** Linus Torvalds, projelerine kendi adını ve \"get\" kelimesini verme eğiliminde olduğu için git'e kendi adını vermiştir. Torvalds'a göre git ismi kısa, hatırlaması kolay ve diğer yazılım araçlarından farklı olduğu için seçilmiştir. 2007 yılındaki bir e-posta listesi gönderisinde kendisini, tıpkı Linux'ta yaptığı gibi projelerine kendi adını vermeyi seven \"egoist bir piç\" olarak tanımladı. Biraz mizahi kökenine rağmen Git, yazılım geliştirme için hayati bir araç haline geldi ve artık hem geliştiriciler hem de kuruluşlar arasında kullanımı yaygınlaştı.\n\nSıradaki: [[courses/git/gitin onemi?|git'in önemi?]]\n","lastmodified":"2023-04-03T19:43:40.759907892Z","tags":[]},"/courses/git/gitin-onemi":{"title":"gitin onemi?","content":"![geliştiriciler](courses/git/devs.jpg)\n\ngit, yazılım geliştirme ve işbirliği için temel bir araçtır ve önemi, sürüm kontrolünü yönetme yeteneğinde yatmaktadır. Versiyon kontrolü, bir kod tabanında zaman içinde yapılan değişiklikleri izleme ve yönetme uygulamasıdır ve git, geliştiricilerin etkili bir şekilde işbirliği yapmasını ve karmaşık yazılım projelerini yönetmesini sağlayan [[dağıtılmış]] bir versiyon kontrol sistemidir.\n\nGit ile birden fazla geliştirici aynı kod tabanı üzerinde eş zamanlı olarak çalışabilir, her biri bağımsız olarak değişikliklere katkıda bulunabilir ve çakışmaları gerçek zamanlı olarak çözebilir. Ayrıca Git, geliştiricilerin değişiklikleri takip etmesini, önceki sürümlere geri dönmesini ve dalları yönetmesini sağlayarak ana kod tabanını etkilemeden yeni özellikler ve hata düzeltmeleri denemelerine olanak tanır.\n\nKısaca Git, tüm yazılım geliştirme ekipleri için kritik bir araçtır ve verimli çalışmalarını, etkili bir şekilde işbirliği yapmalarını ve karmaşık projeleri kolaylıkla yönetmelerini sağlar.\n\n","lastmodified":"2023-04-03T19:43:40.759907892Z","tags":[]},"/templates/courses/Mini-Kurs-git":{"title":"Mini Kurs git","content":"[[courses/git/Mini Kurs git|Mini Kurs: git]]\n* Giriş\n\t- [[courses/git/git nedir?|git nedir?]]\n\t* [[courses/git/gitin onemi|git'in önemi]]\n\t * [[courses/git/Temel git teminolojisi|Temel git teminolojisi]]\n\n","lastmodified":"2023-04-03T19:43:40.759907892Z","tags":[]}}